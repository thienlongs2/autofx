#include <Python.mqh>

input string python_script = "C:\\Users\\Sww\\Desktop\\code_project\\pythonProject\\fx_auto\\backtest.py";
input double LotSize = 0.1;
input double StopLoss = 10;
input double TakeProfit = 15;
input int MaxOrders = 1;

// ========================== üü¢ G·ªåI PYTHON D·ª∞ ƒêO√ÅN GI√Å ==========================
double PredictPrice() {
    PythonInit();
    double result = PythonCallFunction(python_script, "predict", "d");
    PythonFinalize();

    PrintFormat("üîç Debug: Gi√° d·ª± ƒëo√°n t·ª´ Python: %.5f", result);

    if (result == 0.0) {
        Print("‚ö†Ô∏è [ERROR] Python kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ d·ª± ƒëo√°n!");
    }

    return result;
}

// ========================== üü¢ ƒê·∫æM S·ªê L·ªÜNH HI·ªÜN T·∫†I ==========================
int GetOpenOrders(int order_type) {
    int count = 0;
    for (int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if (PositionSelectByTicket(ticket)) {
            if (PositionGetString(POSITION_SYMBOL) == _Symbol &&
                PositionGetInteger(POSITION_TYPE) == order_type) {
                count++;
            }
        }
    }
    PrintFormat("üìä Debug: S·ªë l·ªánh hi·ªán t·∫°i lo·∫°i %d: %d", order_type, count);
    return count;
}

// ========================== üü¢ M·ªû L·ªÜNH BUY ==========================
void OpenBuy() {
    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    double sl = ask - StopLoss * _Point;
    double tp = ask + TakeProfit * _Point;

    PrintFormat("üìä Debug: Gi√° Ask: %.5f | SL: %.5f | TP: %.5f", ask, sl, tp);

    if (GetOpenOrders(POSITION_TYPE_BUY) < MaxOrders) {
        Print("üìà M·ªü l·ªánh Buy");
        MqlTradeRequest request;
        MqlTradeResult result;
        ZeroMemory(request);

        request.action = TRADE_ACTION_DEAL;
        request.type = ORDER_TYPE_BUY;
        request.symbol = _Symbol;
        request.volume = LotSize;
        request.price = ask;
        request.sl = sl;
        request.tp = tp;
        request.magic = 123456;
        request.comment = "LSTM Buy";
        request.type_filling = ORDER_FILLING_FOK;
        request.deviation = 10;

        if (!OrderSend(request, result)) {
            PrintFormat("‚ùå L·ªói m·ªü l·ªánh Buy: %d - %s", result.retcode, result.comment);
        } else {
            PrintFormat("‚úÖ L·ªánh Buy m·ªü th√†nh c√¥ng! Ticket: %llu", result.order);
        }
    }
}

// ========================== üü¢ M·ªû L·ªÜNH SELL ==========================
void OpenSell() {
    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    double sl = bid + StopLoss * _Point;
    double tp = bid - TakeProfit * _Point;

    PrintFormat("üìä Debug: Gi√° Bid: %.5f | SL: %.5f | TP: %.5f", bid, sl, tp);

    if (GetOpenOrders(POSITION_TYPE_SELL) < MaxOrders) {
        Print("üìâ M·ªü l·ªánh Sell");
        MqlTradeRequest request;
        MqlTradeResult result;
        ZeroMemory(request);

        request.action = TRADE_ACTION_DEAL;
        request.type = ORDER_TYPE_SELL;
        request.symbol = _Symbol;
        request.volume = LotSize;
        request.price = bid;
        request.sl = sl;
        request.tp = tp;
        request.magic = 123456;
        request.comment = "LSTM Sell";
        request.type_filling = ORDER_FILLING_FOK;
        request.deviation = 10;

        if (!OrderSend(request, result)) {
            PrintFormat("‚ùå L·ªói m·ªü l·ªánh Sell: %d - %s", result.retcode, result.comment);
        } else {
            PrintFormat("‚úÖ L·ªánh Sell m·ªü th√†nh c√¥ng! Ticket: %llu", result.order);
        }
    }
}

// ========================== üü¢ QU·∫¢N L√ù L·ªÜNH ==========================
void ManageOrders() {
    MqlTradeRequest request;
    MqlTradeResult result;

    for (int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if (PositionSelectByTicket(ticket)) {
            double tp = PositionGetDouble(POSITION_TP);
            double price = PositionGetDouble(POSITION_PRICE_CURRENT);
            ENUM_POSITION_TYPE position_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

            PrintFormat("üìä Debug: Ki·ªÉm tra l·ªánh #%llu | Gi√° hi·ªán t·∫°i: %.5f | TP: %.5f", ticket, price, tp);

            if ((position_type == POSITION_TYPE_BUY && price >= tp) ||
                (position_type == POSITION_TYPE_SELL && price <= tp)) {

                PrintFormat("‚úÖ ƒê√≥ng l·ªánh #%llu - Gi√° hi·ªán t·∫°i: %.5f", ticket, price);

                ZeroMemory(request);
                request.action = TRADE_ACTION_CLOSE_BY;
                request.position = ticket;

                if (!OrderSend(request, result)) {
                    PrintFormat("‚ùå L·ªói ƒë√≥ng l·ªánh #%llu: %d - %s", ticket, result.retcode, result.comment);
                } else {
                    PrintFormat("‚úÖ L·ªánh #%llu ƒë√£ ƒë∆∞·ª£c ƒë√≥ng th√†nh c√¥ng!", ticket);
                }
            }
        }
    }
}

// ========================== üü¢ X·ª¨ L√ù TICK ==========================
void OnTick() {
    double prediction = PredictPrice();
    if (prediction == 0.0) {
        Print("‚ö†Ô∏è Kh√¥ng c√≥ gi√° d·ª± ƒëo√°n, b·ªè qua OnTick.");
        return;
    }

    double current_price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    PrintFormat("üìä Debug: Gi√° hi·ªán t·∫°i: %.5f | Gi√° d·ª± ƒëo√°n: %.5f", current_price, prediction);

    ManageOrders();

    if (prediction > current_price) {
        Print("üìà ƒêi·ªÅu ki·ªán Buy th·ªèa m√£n! M·ªü l·ªánh Buy.");
        OpenBuy();
    } else {
        Print("üìâ ƒêi·ªÅu ki·ªán Sell th·ªèa m√£n! M·ªü l·ªánh Sell.");
        OpenSell();
    }
}
