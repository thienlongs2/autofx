import MetaTrader5 as mt5
import numpy as np
import pandas as pd
import tensorflow as tf
import ta
import pickle

# ===================== 1Ô∏è‚É£ Load m√¥ h√¨nh & Scaler =====================
model = tf.keras.models.load_model("best_lstm_model.keras")

# Load scaler ƒë√£ l∆∞u t·ª´ file pickle
try:
    with open("scaler.pkl", "rb") as f:
        scaler_X, scaler_y = pickle.load(f)
except FileNotFoundError:
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y scaler.pkl! H√£y ch·∫Øc ch·∫Øn ƒë√£ l∆∞u khi train.")
    exit()


# ===================== 2Ô∏è‚É£ L·∫•y d·ªØ li·ªáu t·ª´ MT5 =====================
def get_mt5_data(symbol="EURUSD", timeframe=mt5.TIMEFRAME_M5, num_bars=100):
    if not mt5.initialize():
        print("‚ö†Ô∏è L·ªói k·∫øt n·ªëi MT5!")
        return None

    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, num_bars)
    mt5.shutdown()

    if rates is None or len(rates) == 0:
        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ MT5!")
        return None

    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    return df


# ===================== 3Ô∏è‚É£ Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu =====================
def preprocess_data(df):
    df['high_low_range'] = df['high'] - df['low']
    df['sma_10'] = df['close'].rolling(window=10).mean()
    df['sma_50'] = df['close'].rolling(window=50).mean()
    df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
    macd = ta.trend.MACD(df['close'])
    df['macd'] = macd.macd()
    df['macd_signal'] = macd.macd_signal()
    bb = ta.volatility.BollingerBands(df['close'], window=20)
    df['bollinger_high'] = bb.bollinger_hband()
    df['bollinger_low'] = bb.bollinger_lband()

    df.dropna(inplace=True)
    return df


# ===================== 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o =====================
def create_sequences(df, sequence_length=50):
    features = ['close', 'high_low_range', 'sma_10', 'sma_50', 'rsi', 'macd', 'macd_signal', 'bollinger_high',
                'bollinger_low']

    # Ki·ªÉm tra ƒë·ªß ƒë·∫∑c tr∆∞ng ch∆∞a
    if not all(feature in df.columns for feature in features):
        missing_features = [f for f in features if f not in df.columns]
        print(f"‚ö†Ô∏è Thi·∫øu c√°c ƒë·∫∑c tr∆∞ng sau: {missing_features}")
        return None

    # L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    df_recent = df[features].iloc[-sequence_length:].values

    # Ki·ªÉm tra ƒë·ªß s·ªë l∆∞·ª£ng c·ªôt ch∆∞a
    if df_recent.shape[0] < sequence_length:
        print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß {sequence_length} d·ªØ li·ªáu g·∫ßn nh·∫•t ƒë·ªÉ d·ª± ƒëo√°n!")
        return None

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    df_scaled = scaler_X.transform(df_recent)
    X = df_scaled.reshape(1, sequence_length, len(features))
    return X


# ===================== 5Ô∏è‚É£ D·ª± ƒëo√°n gi√° ti·∫øp theo =====================
def predict():
    df = get_mt5_data()
    if df is None:
        return None

    df = preprocess_data(df)
    X = create_sequences(df)

    if X is None:
        return None

    # D·ª± ƒëo√°n
    prediction_scaled = model.predict(X)[0][0]

    # Chuy·ªÉn gi√° tr·ªã v·ªÅ gi√° tr·ªã th·ª±c
    predicted_price = scaler_y.inverse_transform([[prediction_scaled]])[0][0]
    return predicted_price


# ===================== 6Ô∏è‚É£ Ch·∫°y script d·ª± ƒëo√°n =====================
if __name__ == "__main__":
    predicted_price = predict()
    if predicted_price is not None:
        print(f"üîÆ D·ª± ƒëo√°n gi√° ti·∫øp theo: {predicted_price:.5f}")
    else:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n!")
